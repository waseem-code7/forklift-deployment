// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.3
// source: proto/deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export enum Status {
  UNSPECIFIED = 0,
  SUCCESS = 1,
  ERROR = 2,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return Status.UNSPECIFIED;
    case 1:
    case "SUCCESS":
      return Status.SUCCESS;
    case 2:
    case "ERROR":
      return Status.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.UNSPECIFIED:
      return "UNSPECIFIED";
    case Status.SUCCESS:
      return "SUCCESS";
    case Status.ERROR:
      return "ERROR";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetSecretRequest {
  key: string;
  serverSecret: string;
}

export interface GetSecretResponse {
  key: string;
  status: Status;
  value: string;
  error?: string | undefined;
}

export interface PutSecretRequest {
  key: string;
  value: string;
  serverSecret: string;
}

export interface PutSecretResponse {
  key: string;
  status: Status;
  error?: string | undefined;
}

function createBaseGetSecretRequest(): GetSecretRequest {
  return { key: "", serverSecret: "" };
}

export const GetSecretRequest: MessageFns<GetSecretRequest> = {
  encode(message: GetSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.serverSecret !== "") {
      writer.uint32(18).string(message.serverSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverSecret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      serverSecret: isSet(object.serverSecret) ? globalThis.String(object.serverSecret) : "",
    };
  },

  toJSON(message: GetSecretRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.serverSecret !== "") {
      obj.serverSecret = message.serverSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecretRequest>, I>>(base?: I): GetSecretRequest {
    return GetSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecretRequest>, I>>(object: I): GetSecretRequest {
    const message = createBaseGetSecretRequest();
    message.key = object.key ?? "";
    message.serverSecret = object.serverSecret ?? "";
    return message;
  },
};

function createBaseGetSecretResponse(): GetSecretResponse {
  return { key: "", status: 0, value: "", error: undefined };
}

export const GetSecretResponse: MessageFns<GetSecretResponse> = {
  encode(message: GetSecretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.error !== undefined) {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretResponse {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: GetSecretResponse): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSecretResponse>, I>>(base?: I): GetSecretResponse {
    return GetSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSecretResponse>, I>>(object: I): GetSecretResponse {
    const message = createBaseGetSecretResponse();
    message.key = object.key ?? "";
    message.status = object.status ?? 0;
    message.value = object.value ?? "";
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBasePutSecretRequest(): PutSecretRequest {
  return { key: "", value: "", serverSecret: "" };
}

export const PutSecretRequest: MessageFns<PutSecretRequest> = {
  encode(message: PutSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.serverSecret !== "") {
      writer.uint32(26).string(message.serverSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PutSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePutSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverSecret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PutSecretRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      serverSecret: isSet(object.serverSecret) ? globalThis.String(object.serverSecret) : "",
    };
  },

  toJSON(message: PutSecretRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.serverSecret !== "") {
      obj.serverSecret = message.serverSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PutSecretRequest>, I>>(base?: I): PutSecretRequest {
    return PutSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PutSecretRequest>, I>>(object: I): PutSecretRequest {
    const message = createBasePutSecretRequest();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    message.serverSecret = object.serverSecret ?? "";
    return message;
  },
};

function createBasePutSecretResponse(): PutSecretResponse {
  return { key: "", status: 0, error: undefined };
}

export const PutSecretResponse: MessageFns<PutSecretResponse> = {
  encode(message: PutSecretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PutSecretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePutSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PutSecretResponse {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: PutSecretResponse): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PutSecretResponse>, I>>(base?: I): PutSecretResponse {
    return PutSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PutSecretResponse>, I>>(object: I): PutSecretResponse {
    const message = createBasePutSecretResponse();
    message.key = object.key ?? "";
    message.status = object.status ?? 0;
    message.error = object.error ?? undefined;
    return message;
  },
};

export type SecretService = typeof SecretService;
export const SecretService = {
  getSecret: {
    path: "/Secret/GetSecret",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSecretRequest): Buffer => Buffer.from(GetSecretRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetSecretRequest => GetSecretRequest.decode(value),
    responseSerialize: (value: GetSecretResponse): Buffer => Buffer.from(GetSecretResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetSecretResponse => GetSecretResponse.decode(value),
  },
  putSecret: {
    path: "/Secret/PutSecret",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PutSecretRequest): Buffer => Buffer.from(PutSecretRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PutSecretRequest => PutSecretRequest.decode(value),
    responseSerialize: (value: PutSecretResponse): Buffer => Buffer.from(PutSecretResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PutSecretResponse => PutSecretResponse.decode(value),
  },
} as const;

export interface SecretServer extends UntypedServiceImplementation {
  getSecret: handleUnaryCall<GetSecretRequest, GetSecretResponse>;
  putSecret: handleUnaryCall<PutSecretRequest, PutSecretResponse>;
}

export interface SecretClient extends Client {
  getSecret(
    request: GetSecretRequest,
    callback: (error: ServiceError | null, response: GetSecretResponse) => void,
  ): ClientUnaryCall;
  getSecret(
    request: GetSecretRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSecretResponse) => void,
  ): ClientUnaryCall;
  getSecret(
    request: GetSecretRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSecretResponse) => void,
  ): ClientUnaryCall;
  putSecret(
    request: PutSecretRequest,
    callback: (error: ServiceError | null, response: PutSecretResponse) => void,
  ): ClientUnaryCall;
  putSecret(
    request: PutSecretRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PutSecretResponse) => void,
  ): ClientUnaryCall;
  putSecret(
    request: PutSecretRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PutSecretResponse) => void,
  ): ClientUnaryCall;
}

export const SecretClient = makeGenericClientConstructor(SecretService, "Secret") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SecretClient;
  service: typeof SecretService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
